<?php

namespace Symfony\WebsiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
	public function loadConversations($nr)
    {
        $q = $this->createQueryBuilder('msg');
        $q->select('usr.id', 'usr.username', 'usr.image_id')
          ->innerJoin('Symfony\WebsiteBundle\Entity\User', 'usr', \Doctrine\ORM\Query\Expr\Join::WITH, 'msg.userIdSend = usr.id and usr.id != :nr OR msg.userIdReceive = usr.id and usr.id != :nr')
          ->where('msg.userIdSend = :nr OR msg.userIdReceive = :nr')
          ->setParameter('nr', $nr)
          ->groupBy('usr.id')
          ->orderBy('msg.sentDate', 'DESC')
          ->getQuery();
    
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getQuery()->getResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin SymfonyWebsiteBundle:User object identified by "%s".',
                $nr
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function queryForOneConversation($userInUse, $userInConversation) {
      $q = $this->createQueryBuilder('msg');
      $q->select('msg.id', 'msg.userIdSend', 'msg.text', 'msg.sentDate', 'msg.usernameMessageSend')
        ->where('msg.userIdSend = :userInUse and msg.userIdReceive = :userInConversation or msg.userIdSend = :userInConversation and msg.userIdReceive = :userInUse')
        ->setParameter('userInUse', $userInUse)
        ->setParameter('userInConversation', $userInConversation)
        ->orderBy('msg.sentDate', 'DESC');

      return $q;
    }

    public function loadOneConversation($userInUse, $userInConversation)
    {
        return $this->queryForOneConversation($userInUse, $userInConversation)
                    ->getQuery()
                    ->getResult();
    }

    public function recentMessagesFromOneConversation($userInUse, $userInConversation) {
        return $this->queryForOneConversation($userInUse, $userInConversation)
                    ->setMaxResults(4)
                    ->getQuery()
                    ->getResult();
    }

    public function loadPrevMessages($userInUse, $userInConversation, $firstId)
    {
        $q = $this->createQueryBuilder('msg');
        $q->select('msg.id', 'msg.userIdSend', 'msg.text', 'msg.sentDate', 'msg.usernameMessageSend')
          ->where('msg.userIdSend = :userInUse and msg.userIdReceive = :userInConversation or msg.userIdSend = :userInConversation and msg.userIdReceive = :userInUse')
          ->andWhere('msg.id < :firstId')
          ->setParameter('userInUse', $userInUse)
          ->setParameter('userInConversation', $userInConversation)
          ->setParameter('firstId', $firstId)
          ->orderBy('msg.sentDate', 'DESC')
          ->setMaxResults(4)
          ->getQuery();
    
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getQuery()->getResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin SymfonyWebsiteBundle:User object identified by "%s".',
                $nr
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function firstMessageSent($userInUse, $userInConversation)
    {
        $q = $this->createQueryBuilder('msg');
        $q->select('msg.id', 'msg.userIdSend', 'msg.text', 'msg.sentDate', 'msg.usernameMessageSend')
          ->where('msg.userIdSend = :userInUse and msg.userIdReceive = :userInConversation or msg.userIdSend = :userInConversation and msg.userIdReceive = :userInUse')
          ->setParameter('userInUse', $userInUse)
          ->setParameter('userInConversation', $userInConversation)
          ->orderBy('msg.id', 'ASC')
          ->setMaxResults(1)
          ->setFirstResult(0)
          ->getQuery();
    
        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            $message = sprintf(
                'Unable to find an active admin SymfonyWebsiteBundle:User object identified by "%s".',
                $nr
            );
            throw new UsernameNotFoundException($message, 0, $e);
        }

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $class === 'Symfony\WebsiteBundle\Entity\Message';
    }
}
