<?php

namespace Symfony\WebsiteBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * LikeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LikeRepository extends EntityRepository
{
    public function countLikes($imageId, $userId)
    {
        $q = $this->createQueryBuilder('u');
        $q->select('COUNT(u)')
          ->where('u.pictureId = :imageId')
          ->andWhere('u.userId != :userId')
          ->setParameter('imageId', $imageId)
          ->setParameter('userId', $userId)
          ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $like = $q->getQuery()->getSingleScalarResult();
        } catch (NoResultException $e) {
            $like = null;
        }
        return $like;
    }

    public function loadAllLikes($imageId, $userId)
    {
        $q = $this->createQueryBuilder('u');
        $q->select('u')
          ->where('u.pictureId = :imageId')
          ->andWhere('u.userId != :userId')
          ->setParameter('imageId', $imageId)
          ->setParameter('userId', $userId)
          ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $like = $q->getQuery()->getResult();
        } catch (NoResultException $e) {
            $like = null;
        }
        return $like;
    }

    public function unicLike($userId, $imageId) {
        $q = $this->createQueryBuilder('u');
        $q->select('u')
          ->where('u.pictureId = :imageId AND u.userId = :userId')
          ->setParameter('imageId', $imageId)
          ->setParameter('userId', $userId)
          ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $like = $q->getQuery()->getSingleResult();
        } catch (NoResultException $e) {
            $like = false;
        }
        return $like;
    }

    public function refreshUser(UserInterface $like)
    {
        $class = get_class($like);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($like->getId());
    }

    public function supportsClass($class)
    {
        return $class === 'Symfony\WebsiteBundle\Entity\Like';
    }

    
}
